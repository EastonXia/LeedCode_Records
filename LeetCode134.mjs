/**
  LeetCode134---加油站
  
  在一条环路上有 n 个加油站，其中第 i 个加油站有汽油 gas[i] 升。
  你有一辆油箱容量无限的的汽车，从第 i 个加油站开往第 i+1 个加油站需要消耗汽油 cost[i] 升。你从其中的一个加油站出发，开始时油箱为空。
  给定两个整数数组 gas 和 cost ，如果你可以绕环路行驶一周，则返回出发时加油站的编号，否则返回 -1 。如果存在解，则 保证 它是 唯一 的。

  示例 1:
  输入: gas = [1,2,3,4,5], cost = [3,4,5,1,2]
  输出: 3
  解释:
  从 3 号加油站(索引为 3 处)出发，可获得 4 升汽油。此时油箱有 = 0 + 4 = 4 升汽油
  开往 4 号加油站，此时油箱有 4 - 1 + 5 = 8 升汽油
  开往 0 号加油站，此时油箱有 8 - 2 + 1 = 7 升汽油
  开往 1 号加油站，此时油箱有 7 - 3 + 2 = 6 升汽油
  开往 2 号加油站，此时油箱有 6 - 4 + 3 = 5 升汽油
  开往 3 号加油站，你需要消耗 5 升汽油，正好足够你返回到 3 号加油站。
  因此，3 可为起始索引。

  示例 2:
  输入: gas = [2,3,4], cost = [3,4,3]
  输出: -1
  解释:
  你不能从 0 号或 1 号加油站出发，因为没有足够的汽油可以让你行驶到下一个加油站。
  我们从 2 号加油站出发，可以获得 4 升汽油。 此时油箱有 = 0 + 4 = 4 升汽油
  开往 0 号加油站，此时油箱有 4 - 3 + 2 = 3 升汽油
  开往 1 号加油站，此时油箱有 3 - 3 + 3 = 3 升汽油
  你无法返回 2 号加油站，因为返程需要消耗 4 升汽油，但是你的油箱只有 3 升汽油。
  因此，无论怎样，你都不可能绕环路行驶一周。
   
  提示:
    gas.length == n
    cost.length == n
    1 <= n <= 10^5
    0 <= gas[i], cost[i] <= 10^4

*/

/**
 * @param {number[]} gas
 * @param {number[]} cost
 * @return {number}
 * 
 *  我们考虑一下下边的情况。
    * * * * * *
    ^     ^
    i     j
    当考虑 i 能到达的最远的时候，假设是 j。
    从i出发时的油肯定会比从i + 1出发时的油多。
    那么 i + 1 到 j 之间的节点是不是就都不可能绕一圈了？
    假设 i + 1 的节点能绕一圈，那么就意味着从 i + 1 开始一定能到达 j + 1。
    又因为从 i 能到达 i + 1，所以从 i 也能到达 j + 1。
    但事实上，i 最远到达 j 。产生矛盾，所以 i + 1 的节点一定不能绕一圈。同理，其他的也是一样的证明。
    所以下一次的 i 我们不需要从 i + 1 开始考虑，直接从 j + 1 开始考虑即可。
    还有一种情况，就是因为到达末尾的时候，会回到 0。

    如果对于下边的情况。
    * * * * * *
    ^   ^
    j   i
    如果 i 最远能够到达 j ，根据上边的结论 i + 1 到 j 之间的节点都不可能绕一圈了，无论如何都无法到达j + 1 了。
    想象成一个圆，所以 i 后边的节点就都不需要考虑了，直接返回 -1 即可。

 */
var canCompleteCircuit = function (gas, cost) {
  var n = gas.length;

  for (var i = 0; i < n; i++) {
      var j = i;
      var remain = gas[i];
      while (remain - cost[j] >= 0) {
          //减去花费的加上新的点的补给
          remain = remain - cost[j] + gas[(j + 1) % n];
          j = (j + 1) % n; // 考虑到是一个圆，所以需要取余
          //j 回到了 i
          if (j == i) {
              return i;
          }
      } 
      
      //最远距离绕到了之前，所以 i 后边的都不可能绕一圈了
      if (j < i) {
          return -1;
      }

      //i 直接跳到 j，外层 for 循环执行 i++，相当于从 j + 1 开始考虑
      i = j;

  }
  return -1;

};

function main() {
  console.log(solve([1, 2, 3, 4, 5], [3, 4, 5, 1, 2]));
  console.log(solve([2, 3, 4], [3, 4, 3]));
}

main();
